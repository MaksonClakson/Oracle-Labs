-- generate_resume
CREATE OR REPLACE PROCEDURE generate_resume(p_time IN TIMESTAMP DEFAULT NULL) IS
  table_name VARCHAR2(30);
  v_html CLOB;
  table_html CLOB;
BEGIN
  v_html := '<html><body>';
  FOR table_rec IN (SELECT table_name FROM user_tables) LOOP
    -- Get the table name from the current record
    table_name := table_rec.table_name;
    IF table_name LIKE '%_LOG' THEN
      generate_resume_table(table_name, p_time, table_html);
      v_html := v_html || table_html;
      DBMS_OUTPUT.PUT_LINE('Processing table ' || table_name);
    END IF;
  END LOOP;
  v_html := v_html || '</body></html>';
  
  -- Insert a log record for the current resume generation
  INSERT INTO RESUME_LOGGING (generated_date) VALUES (CURRENT_TIMESTAMP);
  DBMS_OUTPUT.PUT_LINE('Output: ' || v_html);
  
  -- Write to file
  print_resume(v_html);
END;
/


-- generate_resume_table
CREATE OR REPLACE PROCEDURE generate_resume_table(p_table_name IN VARCHAR2, p_time IN TIMESTAMP DEFAULT NULL, v_html OUT CLOB) IS
  v_inserts NUMBER;
  v_updates NUMBER;
  v_deletes NUMBER;
  v_last_date TIMESTAMP;
  v_query VARCHAR2(4000);
BEGIN
  -- Determine the last resume generation date
  IF p_time IS NOT NULL THEN
    v_last_date := p_time;
  ELSE
    SELECT MAX(generated_date) INTO v_last_date FROM RESUME_LOGGING;
    IF v_last_date IS NULL THEN
      v_last_date := CURRENT_TIMESTAMP;
    END IF;
  END IF;
  DBMS_OUTPUT.PUT_LINE('Hey djfl');
  
  -- Count the number of inserts, updates, and deletes since the last resume generation date
  v_query := 'SELECT COUNT(*) FROM ' || p_table_name || ' WHERE operation = ''INSERT'' AND operation_time > :1';
  EXECUTE IMMEDIATE v_query INTO v_inserts USING v_last_date;
--  
  v_query := 'SELECT COUNT(*) FROM ' || p_table_name || ' WHERE operation = ''UPDATE'' AND operation_time > :1';
  EXECUTE IMMEDIATE v_query INTO v_updates USING v_last_date;
  
  
  DBMS_OUTPUT.PUT_LINE('Age: ' || p_table_name);
  v_query := 'SELECT COUNT(*) FROM ' || p_table_name || ' WHERE operation = ''DELETE'' AND operation_time > :1';
  EXECUTE IMMEDIATE v_query INTO v_deletes USING v_last_date;
  
  -- Generate the HTML resume
  v_html := '<h2>Resume for ' || p_table_name || '</h2>';
  v_html := v_html || '<p>Number of inserts since: ' || v_inserts || '</p>';
  v_html := v_html || '<p>Number of updates since: ' || v_updates || '</p>';
  v_html := v_html || '<p>Number of deletes since: ' || v_deletes || '</p>';
  
--EXCEPTION
--  WHEN OTHERS THEN
--    DBMS_OUTPUT.PUT_LINE('Error generating resume: ' || SQLERRM);
END;
/

DECLARE
    v_query VARCHAR2(400);
    v_deletes NUMBER;
    p_table_name VARCHAR2(400) := 'STUDENTS_LOG';
BEGIN
  v_query := 'SELECT COUNT(*) FROM ' || p_table_name || ' WHERE operation = ''DELETE'' AND operation_time > :1';
  EXECUTE IMMEDIATE v_query INTO v_deletes USING CURRENT_TIMESTAMP;
  DBMS_OUTPUT.PUT_LINE('Age: ' || v_deletes);
END;
/


-- print_resume
CREATE OR REPLACE PROCEDURE print_resume(p_html IN CLOB) IS
  v_output_file UTL_FILE.FILE_TYPE;
BEGIN
  v_output_file := UTL_FILE.FOPEN('MY_DIR', 'resume.html', 'w');
  UTL_FILE.PUT_LINE(v_output_file, p_html);
  UTL_FILE.FCLOSE(v_output_file);
  DBMS_OUTPUT.PUT_LINE('Resume generated and saved to file: /home/oracle/resume.html');
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error printing resume: ' || SQLERRM);
END;
/

EXEC generate_resume();
EXEC generate_resume(TO_TIMESTAMP('09.04.23 23:05:00.000000000', 'dd.mm.yy hh24:mi:ss.ff'));


-- Unnecessary stuff
SET SERVEROUTPUT ON;

CREATE TABLE RESUME_LOGGING (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY UNIQUE,
    generated_date TIMESTAMP
);


GRANT CREATE ANY DIRECTORY TO imaksus;
CREATE OR REPLACE DIRECTORY my_dir AS '/opt/oracle/oradata';

SHOW PARAMETER BACKGROUND_DUMP_DEST;